@page "/single-player"
@using OpenKnuckleBones.Components
<h1>Single Player</h1>

Welcome to Single Player Knuckle Bones

<div>

    <Modal @ref="WinnerModal">
        <Title>Winner: @winner</Title>
        <Body>
        </Body>
        <Footer>
            <button type="button" class="btn btn-primary" @onclick=onReset>New Game</button>
            <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => WinnerModal.Close()">Close</button>
        </Footer>
    </Modal>

    <div class="player top">
        <div class="player-dice">
            <Dice number=1 />
            <p>Total: @getTotal(_botArr)</p>
        </div>

        <Board rolled=false boardArr=@botArr dim=@_dim onColClick=@onColClick />
    </div>

    <div class="player bottom">
        <div class="player-dice">
            @if (@rolled) {
                <Dice number=@rollNum />
            } else {
                <button class="btn btn-primary" @onclick=onRollClick>Roll Dice</button>
            }

            <p>Total: @getTotal(_boardArr)</p>
        </div>

        <Board rolled=@rolled boardArr=@boardArr dim=@_dim onColClick=@onColClick/>
    </div>
</div>




@code {
    #region Private Vars

    private short _rollNum = 0;
    private bool _rolled = false;
    private static short[] _dim = { 3, 3 };

    private short[,] _boardArr = new short[_dim[0], _dim[1]];

    private short[,] _botArr = new short[_dim[0], _dim[1]];

    private Modal WinnerModal { get; set; }

    private Random rnd = new Random();

    #endregion

    #region Getters/Setters

    public string winner {
        get {

            if(botTotal < playerTotal) {
                return "Player";
            } else if (playerTotal > botTotal) {
                return "Bot";
            }

            return "";
        }
    }

    public bool isEnded {
        get {
            return zeroCount(_boardArr) == 0 || zeroCount(_botArr) == 0;
        }
    }

    public short botTotal {
        get {
            return getTotal(_botArr);
        }
    }

    public short playerTotal
    {
        get
        {
            return getTotal(_boardArr);
        }
    }

    public short rollNum {
        get {
            return _rollNum;
        }

        set {
            if(!_rolled) {
                _rollNum = value;
            }
        }
    }

    public bool rolled {
        get {
            return _rolled;
        }
    }

    public short[,] boardArr {
        get {
            return _boardArr;
        }
    }

    public short[,] botArr
    {
        get
        {
            return _botArr;
        }
    }

    #endregion

    #region Button Functions

    private void onRollClick() {
        rollNum = (short) (rnd.Next(5)+1);
        _rolled = true;
    }

    private void onColClick(short col) {

        --col;

        if(rolled) {
            turn(_boardArr, _botArr, col, rollNum);
            _rolled = false;

            if (!isEnded)
            {
                runBotsTurn();
            } else {
                WinnerModal.Open();
            }
        }
    }

    private void onReset() {
        _rolled = false;
        _rollNum = 0;

        _boardArr = new short[_dim[0], _dim[1]];
        _botArr = new short[_dim[0], _dim[1]];

        WinnerModal.Close();
    }

    #endregion

    #region Helper Functions

    private short zeroCount(short[,] arr) {
        short count = 0;

        foreach(short i in arr) {
            if(i==0) {
                count++;
            }
        }

        return count;
    }

    private void turn(short[,] playedArr, short[,] opposingArr,short col, short val) {
        
        // Rule: When player selects a column to place a dice, 
        //       all enemies dice with equal value from that 
        //       same col are removed
        remValFromCol(opposingArr, col, val);

        short row = getLastIndex(playedArr, col);

        playedArr[row, col] = val;

    }

    private void runBotsTurn() {

        short botTurn = (short)(rnd.Next(5) + 1);
        short botCol = (short)(rnd.Next(3));

        turn(_botArr, _boardArr, botCol, botTurn);

        if (isEnded) {
            WinnerModal.Open();
        }
    }

    private void remValFromCol(short[,] arr, short col, short val) {
        for (short i = 0; i < _dim[1]; i++)
        {
            // Check if we remove dice from this row

            if (arr[i, col] == val)
            {
                arr[i, col] = 0; // Remove row
            }

            // Swap

            if (i > 0 && arr[i - 1, col] == 0)
            {
                arr[i - 1, col] = arr[i, col]; // Move current row down
                arr[i, col] = 0; // set current row to 0
            }
        }
    }

    private short getLastIndex(short[,] arr, short col) {
        for(short i = 0; i < arr.Length; i++) {
            if(arr[i, col] <= 0) {
                return i;
            }
        }

        return -1;
    }

    private short getTotal(short[,] arr) {

        short total = 0;

        for(short i = 0; i < _dim[1]; i++) {
            total += getColTotal(i, arr);
        }

        return total;
    }

    // Get Total of a column from _boardArr
    private short getColTotal(short col, short[,] arr)
    {
        short total = 0;

        /* Rule: When one column has multiple of a single digit (I.E. 6),
                 that number is multiplied by the count of that digit.

           Ex:   If column 3 looks like the following [4,6,6] the column
                 score is ((6+6)x2)+4 = 28.
         */
        
        short[] colarr = getCol(col, arr);

        short count = 0; // Keeps count of each digit in the column

        for (short i = 1; i <= 6; i++)
        {

            count = 0;

            for (short j = 0; j < _dim[0]; j++)
            {
                // if the current row (colarr[j]) == the current digit (i)
                if (colarr[j] == i)
                {
                    colarr[j] = 0; // Set to 0 so next rule won't use it in the sum
                    count++; // Increment count of digit i
                }
            }

            total += (short) (i * count * count); 
            /*
               Multiply count of i (digit) with the digit itself
               This works because if we were to have only 1, it's 1xi
               if we have 2 6's, it's 2x6 which follows the rule
            */
        }

        return total;
    }

    private short[] getCol(short col, short[,] arr)
    {
        short[] newarr = new short[_dim[0]];

        for (short i = 0; i < _dim[0]; i++)
        {
            newarr[i] = arr[i, col];
        }

        return newarr;
    }

    #endregion
}