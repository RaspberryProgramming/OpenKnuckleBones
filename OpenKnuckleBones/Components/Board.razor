<table class="table">
        
    <thead>
        @if (_rolled)
        {
            <tr>
                @for(short i = 1; i <= _dim[1]; i++) {
                    var index = i;

                    <td>
                        <button class="btn btn-secondary" @onclick="()=>{onColClick.InvokeAsync(index);}">Col @index</button>
                    </td>
                }
            </tr>
        }
    </thead>
        
    

    <tbody>
        @for(short i = 0; i < _dim[0]; i++)
        {
            <tr>
                @for (short j = 0; j < _dim[1]; j++)
                {
                    <td>
                        @if (_boardArr[i, j] > 0)
                        {
                            <Dice number=_boardArr[i,j]/>
                        } 
                        else
                        {
                            <i class="bi bi-question-square dice"></i>
                        }
                    </td>
                }
            </tr>
        }

        <tr>
            @for(short i = 0; i < _dim[1]; i++)
            {
                <td>@getColTotal(i)</td>
            }
        </tr>
    </tbody>
</table>
@code {
    #region Private Vars
    
    private short[] _dim;
    private short[,] _boardArr;
    private bool _rolled;

    #endregion

    #region Parameters
    [ParameterAttribute]
    public short[,] boardArr {
        set {
            _boardArr = value;
        }
    }

    [ParameterAttribute]
    public short[] dim
    {
        set
        {
            _dim = value;
        }
    }

    [ParameterAttribute]
    public bool rolled {
        set {
            _rolled = value;
        }
    }

    [Parameter]
    public EventCallback<short> onColClick { get; set; }

    #endregion

    #region Functions

    // Get Total of a column from _boardArr
    private int getColTotal(short col){
        int total = 0;

        short[] colarr = getCol(col, _boardArr);

        /* Rule: When one column has multiple of a single digit (I.E. 6), 
                 that number is multiplied by the count of that digit.

           Ex:   If column 3 looks like the following [4,6,6] the column
                 score is ((6+6)x2)+4 = 28.
         */

        short count = 0; // Keeps count of each digit in the column

        for(short i = 1; i <= 6; i++) {

            count = 0;

            for (short j = 0; j < _dim[0]; j++)
            {
                // if the current row (colarr[j]) == the current digit (i)
                if (colarr[j] == i)
                {
                    colarr[j] = 0; // Set to 0 so next rule won't use it in the sum
                    count++; // Increment count of digit i
                }
            }

            total += (short)(i * count * count);
            /* 
                Multiply count of i (digit) with the digit itself
                This works because if we were to have only 1, it's 1xi
                if we have 2 6's, it's 2x6 which follows the rule
            */
        }       

        return total;
    }

    private short[] getCol(short col, short[,] arr) {
        short[] newarr = new short[_dim[0]];

        for (short i = 0; i < _dim[0]; i++) {
            newarr[i] = arr[i, col];
        }

        return newarr;
    }

    #endregion
}
